{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\IconBase.svelte",
    "..\\AddModuleBar.svelte",
    "..\\App.svelte",
    "..\\Button.svelte",
    "..\\ButtonRedoUndo.svelte",
    "..\\Canvas.svelte",
    "..\\ConnectionSVG.svelte",
    "..\\FlowModuleContentv2.svelte",
    "..\\FlowModuleHeaderv2.svelte",
    "..\\FlowModuleInputv2.svelte",
    "..\\FlowModuleOutputv2.svelte",
    "..\\FlowModulev2.svelte",
    "..\\Modal.svelte",
    "..\\ModalAlert.svelte",
    "..\\ModalIntro.svelte",
    "..\\ModalWrongTypes.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let title = null;\n  export let viewBox;\n</script>\n\n<style>\n  svg {\n    stroke: currentColor;\n    fill: currentColor;\n    stroke-width: 0;\n    width: 100%;\n    height: auto;\n    max-height: 100%;\n  }  \n</style>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" {viewBox}>\n  {#if title}\n    <title>{title}</title>\n  {/if}\n  <slot />\n</svg>\n",
    "<script lang=\"typescript\">import { fade } from 'svelte/transition';\r\nimport { TemplateModule, TemplatePort } from './templates';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nimport Button from './Button.svelte';\r\nimport { onMount } from 'svelte';\r\nlet ModulesTemplatesList = [];\r\nlet ModuleVarList = [];\r\nlet ModuleFunctionList = [];\r\nfunction sendModuleInfo(ModuleTemplate) {\r\n    dispatch('AddModule', {\r\n        module: ModuleTemplate\r\n    });\r\n}\r\n//read Templates for the Modules --> inside public dr\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar filePath = path.join(__dirname, 'ModulesTemplates.json');\r\nonMount(async () => {\r\n    fs.readFile(filePath, function (err, data) {\r\n        if (!err) {\r\n            let json = JSON.parse(data);\r\n            let i;\r\n            for (i = 0; i < json.Templates.Variables.length; i++) {\r\n                let tempVar = new TemplateModule(json.Templates.Variables[i].Name);\r\n                //como é var so vai ter outputs\r\n                let j;\r\n                for (j = 0; j < json.Templates.Variables[i].IO.Outputs.length; j++) {\r\n                    let tempPort = new TemplatePort(false, json.Templates.Variables[i].IO.Outputs[j].PortType, json.Templates.Variables[i].IO.Outputs[j].VarName);\r\n                    tempVar.listOutputs.push(tempPort);\r\n                }\r\n                //console.log(tempVar)\r\n                ModuleVarList.push(tempVar);\r\n            }\r\n            for (i = 0; i < json.Templates.Functions.length; i++) {\r\n                let tempVar = new TemplateModule(json.Templates.Functions[i].Name);\r\n                //como é function vai ter inputs e outputs\r\n                let j;\r\n                for (j = 0; j < json.Templates.Functions[i].IO.Inputs.length; j++) {\r\n                    let tempPort = new TemplatePort(true, json.Templates.Functions[i].IO.Inputs[j].PortType, json.Templates.Functions[i].IO.Inputs[j].VarName);\r\n                    tempVar.listInputs.push(tempPort);\r\n                }\r\n                let h;\r\n                for (h = 0; h < json.Templates.Functions[i].IO.Outputs.length; h++) {\r\n                    let tempPort = new TemplatePort(false, json.Templates.Functions[i].IO.Outputs[h].PortType, json.Templates.Functions[i].IO.Outputs[h].VarName);\r\n                    tempVar.listOutputs.push(tempPort);\r\n                }\r\n                tempVar.functionId = json.Templates.Functions[i].FunctionID;\r\n                //console.log(tempVar)\r\n                ModuleFunctionList.push(tempVar);\r\n            }\r\n            ModuleVarList = ModuleVarList;\r\n            ModuleFunctionList = ModuleFunctionList;\r\n        }\r\n        else {\r\n            console.log(err);\r\n        }\r\n    });\r\n});\r\n</script>\r\n\r\n{#if ModuleVarList.length!=0}\r\n    <h4>Variables</h4>\r\n    {#each ModuleVarList as variable}\r\n        <Button on:click={e => sendModuleInfo(variable)} name={variable.name}></Button>\r\n    {/each}\r\n{:else}\r\n    <h4>No templates for Variables</h4>\r\n{/if}\r\n{#if ModuleFunctionList.length!=0}\r\n    <h4>Functions</h4>\r\n    {#each ModuleFunctionList as variable}\r\n        <Button on:click={e => sendModuleInfo(variable)} name={variable.name}></Button>\r\n    {/each}\r\n{:else}\r\n    <h4>No templates for Functions</h4>\r\n{/if}\r\n\t\r\n<style>\r\n    h1, h4 {\r\n        color:white;\r\n    }\r\n</style>",
    "<script lang=\"typescript\">import AppCanvas from './AppCanvas.svelte';\r\nimport { onMount } from 'svelte';\r\nimport { Module, Port, Connection, Chart } from './StructureLogic';\r\nimport Button from './Button.svelte';\r\nimport Navbar from './Navbar.svelte';\r\nimport AddModuleBar from './AddModuleBar.svelte';\r\nimport AppRedoUndoSave from './AppRedoUndoSave.svelte';\r\nimport { ChartHistory } from './stores';\r\nimport ModalWrongTypes from './ModalWrongTypes.svelte';\r\nimport ModalAlert from './ModalAlert.svelte';\r\nlet ModalWrongTypesshow = false;\r\nconst handleWrongTypes = (e) => {\r\n    ModalWrongTypesshow = true;\r\n};\r\nvar fs = require('fs');\r\nvar dir = '../MyFlowProjects';\r\nlet ProjectName;\r\nlet ProjectPath;\r\nlet myAppCanvas;\r\nlet myLoadProjectBar;\r\nlet myNavBar;\r\nlet myAddModule;\r\nlet canvasArea;\r\n//needed to know the size of the navbar\r\n$: top = myNavBar ? myNavBar.getBoundingClientRect().bottom : 0;\r\n$: left = myAddModule ? myAddModule.getBoundingClientRect().right : 0;\r\nlet ModalAlertshow = false;\r\nlet ModalAlertError = false;\r\nlet Alertmessage;\r\nconst handleSaveProject = (e) => {\r\n    myAppCanvas.saveProject(ProjectPath);\r\n};\r\nconst handleAddModule = (e) => {\r\n    let TemplateModule = e.detail.module;\r\n    let ModuleToBeAdded = new Module(TemplateModule.name);\r\n    for (let i = 0; i < TemplateModule.listInputs.length; i++) {\r\n        let PortToBeAdded = new Port(TemplateModule.listInputs[i].isInput, TemplateModule.listInputs[i].varType, TemplateModule.listInputs[i].varName);\r\n        ModuleToBeAdded.inputList.push(PortToBeAdded);\r\n    }\r\n    for (let i = 0; i < TemplateModule.listOutputs.length; i++) {\r\n        let PortToBeAdded = new Port(TemplateModule.listOutputs[i].isInput, TemplateModule.listOutputs[i].varType, TemplateModule.listOutputs[i].varName);\r\n        ModuleToBeAdded.outputList.push(PortToBeAdded);\r\n    }\r\n    ModuleToBeAdded.functionId = TemplateModule.functionId;\r\n    ModuleToBeAdded.name = TemplateModule.name;\r\n    myAppCanvas.addXModule(ModuleToBeAdded);\r\n};\r\nconst handleNewProject = (e) => {\r\n    myAppCanvas.newProject();\r\n};\r\nconst handleUndo = (e) => {\r\n    myAppCanvas.undo();\r\n};\r\nconst handleRedo = (e) => {\r\n    myAppCanvas.redo();\r\n};\r\nconst handleProjectNameNotDefined = (e) => {\r\n    myAppCanvas.trySaveProjectToFile();\r\n};\r\nconst handleTrytoSaveProject = (e) => {\r\n    myAppCanvas.trySaveProjectToFile();\r\n};\r\nconst handleTryToLoadProject = (e) => {\r\n    myAppCanvas.tryToLoadProject();\r\n};\r\nconst handleNewProjectInitiated = (e) => {\r\n    ProjectName = undefined;\r\n    ProjectPath = undefined;\r\n};\r\nconst handleFileWasLoadedCorrectly = (e) => {\r\n    ProjectName = e.detail.ProjectName.ProjectName;\r\n    ProjectPath = e.detail.ProjectPath.ProjectPath;\r\n};\r\n</script>\r\n<div class=\"grid-container\">\r\n    <div class=\"grid-item title\" bind:this={myNavBar}>\r\n        <div style=\"float: left;padding-left: 50px;\">\r\n            <h2>ComputeFlow</h2>\r\n        </div>\r\n    </div>  \r\n    <div class=\"grid-item navbar\" bind:this={myNavBar}>\r\n        <Navbar\r\n            on:NewProject={handleNewProject}\r\n            on:AddModule={handleAddModule}\r\n            on:TrytoSaveProject={handleTrytoSaveProject}\r\n            on:TryToLoadProject={handleTryToLoadProject}\r\n            ProjectName={ProjectName} />\r\n    </div> \r\n    <div class=\"grid-item zoom\">\r\n    </div>\r\n    <div class=\"grid-item redoundo\">\r\n        <AppRedoUndoSave\r\n            ProjectName={ProjectName} \r\n            ProjectPath={ProjectPath} \r\n            on:SaveProject={handleSaveProject}\r\n            on:ProjectNameNotDefined={handleProjectNameNotDefined}\r\n            on:Redo={handleRedo}\r\n            on:Undo={handleUndo}/>\r\n    </div>\r\n    <div class=\"grid-item AddModule\" bind:this={myAddModule}>\r\n        <AddModuleBar \r\n            on:AddModule={handleAddModule}\r\n            />\r\n\r\n    </div>\r\n    \r\n    <div class=\"grid-item canvas\" bind:this={canvasArea}>\r\n        <AppCanvas \r\n            bind:this={myAppCanvas}\r\n            {left}\r\n            {top}\r\n\r\n            on:fileWasLoadedCorrectly={handleFileWasLoadedCorrectly}\r\n            on:fileWasSavedCorrectly={handleFileWasLoadedCorrectly}\r\n            on:newProjectInitiated={handleNewProjectInitiated}\r\n\r\n            on:wrongTypes={handleWrongTypes}\r\n            ProjectName={ProjectName} \r\n            /> \r\n    </div>\r\n</div>\r\n<ModalWrongTypes bind:show={ModalWrongTypesshow} />\r\n\r\n<style>\r\n    .grid-container {\r\n    display: grid;\r\n    grid-row-gap: 1px;\r\n    background-color: #27948e;\r\n\tgrid-auto-rows: 50px minmax(100px, auto)  minmax(100px, auto);\r\n\tgrid-auto-columns: 250px auto auto auto auto;\r\n    height:100%;\r\n    }\r\n\r\n    .grid-item {\r\n    background-color:  rgb(51, 51, 51);\r\n    text-align: center;\r\n    }\r\n\r\n    .title {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 1;\r\n    }\r\n    .navbar {\r\n    grid-column: 3 / span 4;\r\n    grid-row: 1;\r\n    }\r\n    \r\n    .zoom {\r\n    grid-column: 7 / span 2;\r\n    grid-row: 1;\r\n    }\r\n    .undoredo {\r\n    grid-column: 9 / span 2;\r\n    grid-row: 1;\r\n    }\r\n    .canvas {\r\n    grid-column: 2 / span 8;\r\n    grid-row: 2/ span 2;\r\n\toverflow: hidden; \r\n\tposition: relative;\r\n    }\r\n    .AddModule {\r\n    grid-column: 1 / span 1;\r\n    grid-row: 2/ span 2;\r\n\toverflow-y: scroll; \r\n    }\r\n    \r\n    .ProjectNameInput {\r\n    height: 50px;\r\n    }\r\n\r\n    h1, h5, h4, h2 {\r\n        color:white;\r\n    }\r\n    ::-webkit-scrollbar {     \r\n        background-color: #27948e;\r\n        width: .8em\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb:window-inactive,\r\n    ::-webkit-scrollbar-thumb {\r\n            background:  white\r\n    }\r\n</style>",
    "<script lang=\"typescript\">export let name;\r\nlet maxLength = 16;\r\nlet displayName = \" \";\r\n$: if (name.length > maxLength) {\r\n    displayName = `${name.slice(0, maxLength)}...`;\r\n}\r\nelse {\r\n    displayName = name;\r\n}\r\n</script>\r\n<button type=\"button\" class=\"btn btn-info\"  on:click>\r\n    {displayName}\r\n</button>\r\n<style>\r\n    button {\r\n        float: center;\r\n        z-index: 11;\r\n        opacity: 1;\r\n        background-color: #27948e;\r\n        color:white;\r\n        border:black;\r\n        width:160px;\r\n        height: 50px;\r\n        padding-top: 15px;\r\n        }\r\n    button:hover {\r\n        float: center;\r\n        z-index: 11;\r\n        opacity: 1;\r\n        background-color: rgb(108, 183, 245);\r\n        color:white;\r\n        border:black;\r\n        width:160px;\r\n        height: 50px;\r\n        padding-top: 15px;\r\n        }\r\n</style>\r\n",
    "<script lang=\"typescript\">\"use strict\";\r\n</script>\r\n<button type=\"button\" class=\"btn btn-info\"  on:click>\r\n    <slot/>\r\n</button>\r\n<style>\r\n    button {\r\n        float: center;\r\n        z-index: 11;\r\n        opacity: 1;\r\n        background-color: #27948e;\r\n        color:white;\r\n        border:black;\r\n        width:50px;\r\n        height: 50px;\r\n        }\r\n    button:hover {\r\n        float: center;\r\n        z-index: 11;\r\n        opacity: 1;\r\n        background-color: rgb(108, 183, 245);\r\n        color:white;\r\n        border:black;\r\n        width:50px;\r\n        height: 50px;\r\n        }\r\n</style>\r\n",
    "<script lang=\"typescript\">import FlowModulev2 from './FlowModulev2.svelte';\r\nimport ConnectionSVG from './ConnectionSVG.svelte';\r\nimport { onMount } from 'svelte';\r\nimport { Module, Port, Connection, Chart } from './StructureLogic';\r\nimport { spring } from 'svelte/motion';\r\nimport { draggable } from './draggable.js';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nexport let ChartStruc;\r\nexport let __HistoryChart;\r\n//TODO allow dragging the chart --> need to chage values here and send it somehow to the modules so handlers can work properly\r\nlet dx = 0;\r\nlet dy = 0;\r\n// if Background_dx & dy is changed, it represents the ammount of space that is already dragged from the background(canvas)\r\nexport let Background_dx;\r\nexport let Background_dy;\r\nconst handleDragMoveBackground = (e) => {\r\n    let { dx: _dx, dy: _dy } = e.detail;\r\n    dx += _dx;\r\n    dy += _dy;\r\n    Background_dx += _dx;\r\n    Background_dy += _dy;\r\n    dispatch('BackgroundMovement', {\r\n        Background_dx: { Background_dx },\r\n        Background_dy: { Background_dy }\r\n    });\r\n};\r\n//ggotta be global and export from app maybe.. so other \"apps\" can access\r\nvar connections = [];\r\n//verify if given coords represent a port and if it has certain PortType //TODO O(n**2) not a good thing\r\nfunction verifyCoordsIsPortFromType(CoordX, CoordY, originalPort, originalModule) {\r\n    for (let module of ChartStruc.ModuleList) {\r\n        //se a porta inicial for input so vamos avaliar outputs e vice versa\r\n        if (originalPort.isInput == false) {\r\n            for (let input of module.inputList) {\r\n                if (input.xPos - input.hiboxSize <= CoordX && input.xPos + input.hiboxSize >= CoordX) {\r\n                    if (input.yPos - input.hiboxSize <= CoordY && input.yPos + input.hiboxSize >= CoordY) {\r\n                        //we need to know if the types are the same\r\n                        if (input.varType == originalPort.varType) {\r\n                            //TODO nomes dinamicos\r\n                            let name = 'connection' + ChartStruc.ModuleList.length;\r\n                            let connection = new Connection(name, originalPort, originalPort.isInput, originalModule, module, input);\r\n                            connection.setConnectedPort(input, module);\r\n                            //inputmodule\r\n                            //InternalPort: Port, ExternalPort: Port, ExternalNode: Module, Connection: Connection)\r\n                            originalModule.addOutputConnection(originalPort, input, module, connection);\r\n                            //outputmodule\r\n                            //InternalPort: Port, ExternalPort: Port, ExternalNode: Module, Connection: Connection\r\n                            module.addInputConnection(input, originalPort, originalModule, connection);\r\n                            connection.calculateCurve();\r\n                            ChartStruc.FinalConnections.push(connection);\r\n                            ChartStruc.FinalConnections = ChartStruc.FinalConnections;\r\n                            //History\r\n                            __HistoryChart.addState(ChartStruc.toJSON());\r\n                        }\r\n                        else {\r\n                            dispatch(\"wrongTypes\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let output of module.outputList) {\r\n                if (output.xPos - output.hiboxSize <= CoordX && output.xPos + output.hiboxSize >= CoordX) {\r\n                    if (output.yPos - output.hiboxSize <= CoordY && output.yPos + output.hiboxSize >= CoordY) {\r\n                        //we need to know the port of the module now\r\n                        if (output.varType == originalPort.varType) {\r\n                            //TODO nomes dinamicos\r\n                            let name = 'connection' + ChartStruc.ModuleList.length;\r\n                            let connection = new Connection(name, originalPort, originalPort.isInput, originalModule, module, output);\r\n                            connection.setConnectedPort(output, module);\r\n                            //inputmodule\r\n                            //InternalPort: Port, ExternalPort: Port, ExternalNode: Module, Connection: Connection)\r\n                            originalModule.addInputConnection(originalPort, output, module, connection);\r\n                            //outputmodule\r\n                            //InternalPort: Port, ExternalPort: Port, ExternalNode: Module, Connection: Connection\r\n                            module.addOutputConnection(output, originalPort, originalModule, connection);\r\n                            connection.calculateCurve();\r\n                            ChartStruc.FinalConnections.push(connection);\r\n                            ChartStruc.FinalConnections = ChartStruc.FinalConnections;\r\n                            dispatch('updateHistory');\r\n                        }\r\n                        else {\r\n                            dispatch(\"wrongTypes\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//TODO posso nao tar sempre a criar e dar simplesment update as ligacoes\r\nconst handleDragEnd = (e) => {\r\n    //History\r\n    __HistoryChart.addState(ChartStruc.toJSON());\r\n};\r\nconst handleDragMove = (e) => {\r\n    let moduleDragged;\r\n    moduleDragged = e.detail.Module;\r\n    let dx = e.detail.dx.dx;\r\n    let dy = e.detail.dy.dy;\r\n    let lastX = e.detail.lastX.lastX;\r\n    let lastY = e.detail.lastY.lastY;\r\n    //TODO\r\n    for (let moduleentry of ChartStruc.ModuleList) {\r\n        if (moduleentry.id == moduleDragged.StrucModule.id) {\r\n            moduleentry.setPortCoords();\r\n            if (moduleentry.connectionsInputs !== undefined) {\r\n                for (let inputconnection of moduleentry.connectionsInputs) {\r\n                    inputconnection.Connection.calculateCurve();\r\n                    for (let finalconnection of ChartStruc.FinalConnections) {\r\n                        if (finalconnection.id == inputconnection.Connection.id) {\r\n                            finalconnection = inputconnection;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (moduleentry.connectionsOutputs !== undefined) {\r\n                for (let outputconnection of moduleentry.connectionsOutputs) {\r\n                    outputconnection.Connection.calculateCurve();\r\n                    for (let finalconnection of ChartStruc.FinalConnections) {\r\n                        if (finalconnection.id == outputconnection.Connection.id) {\r\n                            finalconnection = outputconnection;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ChartStruc.FinalConnections = ChartStruc.FinalConnections;\r\n    }\r\n};\r\nconst handleConnectionStart = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port, parentModule } = e.detail;\r\n    //TODO id da conexao dinamicamente\r\n    let connection = new Connection('tentativa', port.port.port.port, port.port.port.port.isInput, parentModule.StrucModule);\r\n    connection.setEndPoints(xFinal.xFinal.xFinal - Background_dx - left, yFinal.yFinal.yFinal - Background_dy - top);\r\n    connection.calculateCurve();\r\n    connections.push(connection);\r\n    connections = connections;\r\n};\r\nconst handleConnectionDrag = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port, parentModule } = e.detail;\r\n    connections = [];\r\n    //TODO id da conexao dinamicamente\r\n    let connection = new Connection('tentativa', port.port.port.port, port.port.port.port.isInput, parentModule.StrucModule);\r\n    connection.setEndPoints(xFinal.xFinal.xFinal - Background_dx - left, yFinal.yFinal.yFinal - Background_dy - top);\r\n    connection.calculateCurve();\r\n    connections.push(connection);\r\n    connections = connections;\r\n};\r\nconst handleConnectionEnd = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port, parentModule } = e.detail;\r\n    connections = [];\r\n    verifyCoordsIsPortFromType(xFinal.xFinal.xFinal - Background_dx - left, yFinal.yFinal.yFinal - Background_dy - top, port.port.port.port, parentModule.StrucModule);\r\n};\r\nconst handleDblClickConnection = (e) => {\r\n    //History\r\n    __HistoryChart.addState(ChartStruc.toJSON());\r\n    for (let i = 0; i < ChartStruc.ModuleList.length; i++) {\r\n        //retirar conexao do modulo pai\r\n        if (ChartStruc.ModuleList[i].connectionsInputs !== undefined) {\r\n            for (let j = 0; j < ChartStruc.ModuleList[i].connectionsInputs.length; j++) {\r\n                if (ChartStruc.ModuleList[i].connectionsInputs[j].Connection == e.detail.connectionClicked) {\r\n                    ChartStruc.ModuleList[i].connectionsInputs.splice(j, 1);\r\n                    ChartStruc.ModuleList[i].connectionsInputs = ChartStruc.ModuleList[i].connectionsInputs;\r\n                }\r\n            }\r\n        }\r\n        //retirar conexao do modulo externo\r\n        if (ChartStruc.ModuleList[i].connectionsOutputs !== undefined) {\r\n            for (let j = 0; j < ChartStruc.ModuleList[i].connectionsOutputs.length; j++) {\r\n                if (ChartStruc.ModuleList[i].connectionsOutputs[j].Connection == e.detail.connectionClicked) {\r\n                    ChartStruc.ModuleList[i].connectionsOutputs.splice(j, 1);\r\n                    ChartStruc.ModuleList[i].connectionsOutputs = ChartStruc.ModuleList[i].connectionsOutputs;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //retirr do Final connextions do canvas que é o que representa graficamente\r\n    let index = ChartStruc.FinalConnections.indexOf(e.detail.connectionClicked);\r\n    if (index > -1) {\r\n        ChartStruc.FinalConnections.splice(index, 1);\r\n    }\r\n    ChartStruc.FinalConnections = ChartStruc.FinalConnections;\r\n};\r\nconst handleDblClickModule = (e) => {\r\n    //History\r\n    __HistoryChart.addState(ChartStruc.toJSON());\r\n    let moduleClicked = e.detail.moduleClicked;\r\n    let moduleClickedInputConnections = e.detail.moduleClicked.connectionsInputs;\r\n    let moduleClickedOutputConnections = e.detail.moduleClicked.connectionsOutputs;\r\n    let moduleList = ChartStruc.ModuleList;\r\n    let finalConnections = ChartStruc.FinalConnections;\r\n    //se tem ligacoes nos inputs\r\n    if (moduleClickedInputConnections) {\r\n        for (let a = 0; a < moduleClickedInputConnections.length; a++) {\r\n            //cannot  go inside details of connections inputs like external module-> return undefineds              \r\n            for (let i = 0; i < moduleList.length; i++) {\r\n                //retirar conexao do modulo externo\r\n                if (moduleList[i].connectionsOutputs !== undefined) {\r\n                    for (let j = 0; j < moduleList[i].connectionsOutputs.length; j++) {\r\n                        if (moduleList[i].connectionsOutputs[j].Connection == moduleClickedInputConnections[a].Connection) {\r\n                            moduleList[i].connectionsOutputs.splice(j, 1);\r\n                            moduleList[i].connectionsOutputs = moduleList[i].connectionsOutputs;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //delete from final connections\r\n            let index = finalConnections.indexOf(moduleClickedInputConnections[a].Connection);\r\n            if (index > -1) {\r\n                finalConnections.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n    //se tem ligacoes nos outputs\\\r\n    if (moduleClickedOutputConnections) {\r\n        for (let a = 0; a < moduleClickedOutputConnections.length; a++) {\r\n            //cannot  go inside details of connections inputs like external module-> return undefineds\r\n            for (let i = 0; i < moduleList.length; i++) {\r\n                //retirar conexao do modulo externo\r\n                if (moduleList[i].connectionsInputs !== undefined) {\r\n                    for (let j = 0; j < moduleList[i].connectionsInputs.length; j++) {\r\n                        if (moduleList[i].connectionsInputs[j].Connection == moduleClickedOutputConnections[a].Connection) {\r\n                            moduleList[i].connectionsInputs.splice(j, 1);\r\n                            moduleList[i].connectionsInputs = moduleList[i].connectionsInputs;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //delete from final connections\r\n            let index = finalConnections.indexOf(moduleClickedOutputConnections[a].Connection);\r\n            if (index > -1) {\r\n                finalConnections.splice(index, 1);\r\n            }\r\n            finalConnections = finalConnections;\r\n        }\r\n    }\r\n    //ChartStruc.ModuleList.forEach(function(m){console.log(`${m.id}=${m.xPos},${m.yPos}`)})\r\n    for (let i = 0; i < moduleList.length; i++) {\r\n        if (moduleList[i].id == moduleClicked.id) {\r\n            moduleList.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n    ChartStruc = ChartStruc;\r\n};\r\nexport let left;\r\nexport let top;\r\n</script>\r\n<svg    use:draggable  \r\n        on:dragmove={handleDragMoveBackground}\r\n        transform={`translate(${Background_dx} ${Background_dy})`} >\r\n\t<g>      \r\n            {#each ChartStruc.ModuleList as moduleEntry}\r\n                <FlowModulev2\r\n                    StrucModule={moduleEntry} \r\n                    on:handleDragEnd={handleDragEnd}\r\n                    on:handleDragMove={handleDragMove}\r\n                    on:handleConnectionStart={handleConnectionStart}\r\n                    on:handleConnectionDrag={handleConnectionDrag}\r\n                    on:handleConnectionEnd={handleConnectionEnd}\r\n                    on:DblclickModule={handleDblClickModule}\r\n                /> \r\n            {/each}\r\n            {#each connections as connection,i (i)}\r\n                <path d={connection.curve} fill=\"transparent\"/>\r\n            {/each}\r\n            {#each ChartStruc.FinalConnections as connection,i (i)}\r\n                <ConnectionSVG \r\n                    on:DblclickConnection={handleDblClickConnection}\r\n                    connection={connection}\r\n                    />\r\n            {/each}\r\n            \r\n    </g>\r\n</svg>\r\n<style>\r\n    svg{\r\n        background-color:#b3b3b3;\r\n        width: 1000%; \r\n        height: 1000% \r\n    }\r\n\r\n    path{\r\n        stroke-width: 5;\r\n        stroke-opacity: 0.5;\r\n        stroke:rgb(0, 0, 0);\r\n\r\n    }\r\n\tcircle { fill: rgb(255, 255, 255); opacity:1;z-index: 1 }\r\n\tcircle:hover { fill: rgb(255, 255, 255); opacity:1;z-index: 1}\r\n</style>",
    "<script lang=\"typescript\">import { Connection } from './StructureLogic';\r\nexport let connection;\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nconst handleDblClick = (e) => {\r\n    dispatch('DblclickConnection', {\r\n        connectionClicked: connection\r\n    });\r\n};\r\n</script>\r\n\r\n\r\n\r\n<path d={connection.curve} on:dblclick={handleDblClick} fill=\"transparent\"/>\r\n<circle cx={connection.parentPort.xPos} cy={connection.parentPort.yPos} r=\"5\" />\r\n<circle cx={connection.externalPort.xPos} cy={connection.externalPort.yPos} r=\"5\" />\r\n\r\n<style>\r\n\r\n    path{\r\n        stroke-width: 5;\r\n        stroke-opacity: 0.5;\r\n        stroke:rgb(0, 0, 0);\r\n\r\n    }\r\n    path:hover{\r\n        stroke-width: 7;\r\n        stroke-opacity: 0.7;\r\n        stroke:rgb(0, 0, 0)\r\n    }\r\n\tcircle { \r\n        fill: rgb(255, 255, 255); \r\n        opacity:1;\r\n    }\r\n\tcircle:hover { \r\n        fill: rgb(255, 255, 255); \r\n        opacity:1;\r\n    }\r\n\r\n</style>",
    "<script lang=\"typescript\">import FlowModuleInputv2 from './FlowModuleInputv2.svelte';\r\nimport FlowModuleOutputv2 from './FlowModuleOutputv2.svelte';\r\nimport { Module, Port, Connection } from './StructureLogic';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nexport let StrucModule;\r\nlet xPos;\r\nlet yPos;\r\nlet moduleWidth;\r\nlet OutputList;\r\nlet InputList;\r\n//it changes due to the number of inputs\r\nlet contentHeight;\r\nlet contentHeightRect;\r\n//if needed to change or adjust the background of the content\r\nlet contentRectX;\r\nlet contentRectY; //40 is the header size... can make it a attribute later //TODO\r\n$: xPos = StrucModule.xPos;\r\n$: yPos = StrucModule.yPos;\r\n$: moduleWidth = StrucModule.getModuleWidth();\r\n$: InputList = StrucModule.inputList;\r\n$: OutputList = StrucModule.outputList;\r\n$: contentHeight = StrucModule.getContentHeight();\r\n$: contentHeight = contentHeight - 5;\r\n$: contentRectX = xPos + 2;\r\n$: contentRectY = yPos + 44;\r\nconst handleConnectionStart = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionStart', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionDrag = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionDrag', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionEnd = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionEnd', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port }\r\n    });\r\n};\r\n</script>\r\n\r\n<g class=\"node-content\">\r\n    <rect class=\"content-round-rect\" width={moduleWidth} height={contentHeight} x={contentRectX} y={contentRectY} rx=\"4\" ry=\"4\" />\r\n    <rect class=\"content-rect\" width={moduleWidth} height={contentHeightRect}  x={contentRectX} y={contentRectY} />\r\n    <g class=\"inputs\">\t\r\n        \r\n        {#each InputList as item, i (i)}\r\n            <FlowModuleInputv2 \r\n                port={item}\r\n                portNumber={i} \r\n                StrucModule={StrucModule} \r\n                on:handleConnectionStart={handleConnectionStart}\r\n                on:handleConnectionDrag={handleConnectionDrag}\r\n                on:handleConnectionEnd={handleConnectionEnd}/>\r\n        {/each}\r\n    </g>    \r\n    <g class=\"outputs\">\r\n        \r\n        {#each OutputList as item, i (i)}\r\n            <FlowModuleOutputv2 \r\n                port={item}\r\n                portNumber={i} \r\n                StrucModule={StrucModule} \r\n                on:handleConnectionStart={handleConnectionStart}\r\n                on:handleConnectionDrag={handleConnectionDrag}\r\n                on:handleConnectionEnd={handleConnectionEnd}/>\r\n        {/each}\r\n    </g>\r\n    \r\n</g>\r\n\r\n<style>\r\n\t.node-content {\r\n\tfill: rgb(117, 117, 117);\r\n\t}\r\n</style> ",
    "<script lang=\"typescript\">export let StrucModule;\r\nlet moduleName;\r\nlet moduleWidth;\r\nlet xPosHeader;\r\nlet yPosHeader;\r\nlet headerTitleX;\r\nlet headerTitleY;\r\n//alterar possivelmente o fundo do header e ajustar\r\nlet headerRectX;\r\nlet headerRectY;\r\n$: xPosHeader = StrucModule.xPos + 2;\r\n$: yPosHeader = StrucModule.yPos + 2;\r\n$: moduleName = StrucModule.name;\r\n$: moduleWidth = StrucModule.getModuleWidth();\r\n$: headerTitleX = xPosHeader + moduleWidth / 2;\r\n$: headerTitleY = yPosHeader + 30;\r\n$: headerRectX = StrucModule.xPos;\r\n$: headerRectY = StrucModule.yPos;\r\n</script>\r\n<g class=\"node-header\">\r\n    <rect class=\"header-round-rect\" width={moduleWidth} height=\"40\" x={xPosHeader} y={yPosHeader} rx=\"4\" ry=\"4\" />\r\n    <rect class=\"header-rect\" width={moduleWidth} height=\"36\" x={headerRectX} y={headerRectY} />\r\n    <text class=\"header-title\" x={headerTitleX} y={headerTitleY}>{moduleName}</text>\r\n</g>\r\n\r\n<style>\r\n    .node-header {\r\n\tfill: rgb(23, 218, 201);\r\n\t}\r\n\t.node-header .header-title {\r\n\tfont-size: 20px;\r\n\tfill: #fff;\r\n\ttext-anchor: middle;\r\n\t}\r\n</style>",
    "\r\n<script lang=\"typescript\">import { Module, Port } from './StructureLogic';\r\nimport { connections } from './connections';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\n//corresponds to the number of the port, of its the 1st, 2nd,...\r\nexport let portNumber;\r\nexport let port;\r\nexport let StrucModule;\r\nlet xPos;\r\nlet yPos;\r\nlet varType;\r\nlet varName;\r\nlet cx;\r\nlet cy;\r\nlet portLabelX;\r\nlet portLabelY;\r\nlet transformValue;\r\nlet cyRealValue;\r\nlet space = ' ';\r\n$: xPos = StrucModule.xPos;\r\n$: yPos = StrucModule.yPos;\r\n$: varType = port.varType;\r\n$: varName = port.varName;\r\n$: cx = xPos + 15;\r\n$: cy = yPos + 10;\r\n$: portLabelX = xPos + 28;\r\n$: portLabelY = yPos + 14;\r\n$: transformValue = 50 + (25 * portNumber);\r\n$: cyRealValue = cy + transformValue;\r\n//console.log(StrucModule)\r\nport.xPos = parseInt(StrucModule.xPos) + 15;\r\nport.yPos = parseInt(StrucModule.yPos) + 10 + 50 + (25 * portNumber);\r\nport.id = portNumber;\r\n//console.log(\"cx: \"+port.xPos)\r\n//console.log(\"cyRealValue: \"+port.yPos)\r\n//console.log(\"portNumber: \"+port.id)\r\n//console.log(\"FlowModuleINputv2 -->  port\")\r\n//console.log(port)\r\nconst handleConnectionStart = (e) => {\r\n    let { lastX, lastY } = e.detail;\r\n    dispatch('handleConnectionStart', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionDrag = (e) => {\r\n    let { lastX, lastY, dx, dy } = e.detail;\r\n    dispatch('handleConnectionDrag', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionEnd = (e) => {\r\n    let { lastX, lastY, dx, dy } = e.detail;\r\n    dispatch('handleConnectionEnd', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\n</script>\r\n\r\n\r\n\r\n<g class=\"input-field\" transform=\"translate(0, {transformValue})\">\r\n\t<g class=\"port\" \r\n                use:connections\r\n\t\t\t\ton:connectionDrag={handleConnectionDrag}\r\n\t\t\t\ton:connectionStart={handleConnectionStart}\r\n\t\t\t\ton:connectionEnd={handleConnectionEnd}>\r\n\t\t<circle class=\"port-outer\" cx={cx} cy={cy} r=\"7.5\" />\r\n\t\t<circle class=\"port-inner\" cx={cx} cy={cy} r=\"5\" />\r\n\t\t<circle class=\"port-scrim\" cx={cx} cy={cy} r=\"7.5\" />\r\n\t</g>\r\n\t<text class=\"port-label\" x={portLabelX} y={portLabelY}>{varType} {space} {varName}</text>\r\n</g>\r\n\r\n<style>\r\n\t.port {\r\n\tcursor: pointer;\r\n\t}\r\n\t.port-scrim {\r\n\tfill: transparent;\r\n\t}\r\n\t.port-outer {\r\n\tfill: #000000;\r\n\t}\r\n\t.port-inner {\r\n\tfill: #ffffff;\r\n\t}\r\n\t.port-label {\r\n\tfont-size: 12px;\r\n\tfill: #fff;\r\n\t}\r\n\t.input-field .port-label {\r\n\ttext-anchor: start;\r\n\t}\r\n</style>",
    "<script lang=\"typescript\">import { Module, Port } from './StructureLogic';\r\nimport { connections } from './connections';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\n//corresponds to the number of the port, of its the 1st, 2nd,...\r\nexport let portNumber;\r\nexport let port;\r\nexport let StrucModule;\r\nlet xPos;\r\nlet yPos;\r\nlet moduleWidth;\r\nlet varType;\r\nlet varName;\r\nlet cx;\r\nlet cy;\r\nlet portLabelX;\r\nlet portLabelY;\r\nlet transformValue;\r\nlet cyRealValue;\r\nlet space = ' ';\r\n$: xPos = StrucModule.xPos;\r\n$: yPos = StrucModule.yPos;\r\n$: moduleWidth = StrucModule.getModuleWidth();\r\n$: varType = port.varType;\r\n$: varName = port.varName;\r\n$: cx = xPos + moduleWidth - 11;\r\n$: cy = yPos + 10;\r\n$: portLabelX = xPos + moduleWidth - 24;\r\n$: portLabelY = yPos + 14;\r\n$: transformValue = 50 + (25 * portNumber);\r\n$: cyRealValue = cy + transformValue;\r\nport.xPos = parseInt(StrucModule.xPos) + parseInt(StrucModule.getModuleWidth()) - 11;\r\nport.yPos = parseInt(StrucModule.yPos) + 10 + 50 + (25 * portNumber);\r\nport.id = portNumber;\r\n//console.log(\"cx: \"+port.xPos)\r\n//console.log(\"cyRealValue: \"+port.yPos)\r\n//console.log(\"portNumber: \"+port.id)\r\nconst handleConnectionStart = (e) => {\r\n    let { lastX, lastY } = e.detail;\r\n    dispatch('handleConnectionStart', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionDrag = (e) => {\r\n    let { lastX, lastY, dx, dy } = e.detail;\r\n    dispatch('handleConnectionDrag', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\nconst handleConnectionEnd = (e) => {\r\n    let { lastX, lastY, dx, dy } = e.detail;\r\n    dispatch('handleConnectionEnd', {\r\n        xInitial: cx,\r\n        xFinal: lastX,\r\n        yInitial: cyRealValue,\r\n        yFinal: lastY,\r\n        port: { port }\r\n    });\r\n};\r\n</script>\r\n\r\n\r\n<g class=\"output-field\" transform=\"translate(0, {transformValue})\">\r\n    <g class=\"port\" \r\n\t\t\t\tuse:connections\r\n\t\t\t\ton:connectionDrag={handleConnectionDrag}\r\n\t\t\t\ton:connectionStart={handleConnectionStart}\r\n\t\t\t\ton:connectionEnd={handleConnectionEnd}>\r\n        <circle class=\"port-outer\" cx={cx} cy={cy} r=\"7.5\" />\r\n        <circle class=\"port-inner\" cx={cx} cy={cy} r=\"5\" />\r\n        <circle class=\"port-scrim\" cx={cx} cy={cy} r=\"7.5\" />\r\n    </g>\r\n    <text class=\"port-label\" x={portLabelX} y={portLabelY}>{varType} {space} {varName}</text>\r\n</g>\r\n\r\n\r\n\r\n\r\n<style>\r\n\t.port {\r\n\tcursor: pointer;\r\n\t}\r\n\t.port-scrim {\r\n\tfill: transparent;\r\n\t}\r\n\t.port-outer {\r\n\tfill: #000000;\r\n\t}\r\n\t.port-inner {\r\n\tfill: #ffffff;\r\n\t}\r\n\t.port-label {\r\n\tfont-size: 12px;\r\n\tfill: #fff;\r\n\t}\r\n\t.input-field .port-label {\r\n\ttext-anchor: start;\r\n\t}\r\n\t.output-field .port-label {\r\n\ttext-anchor: end;\r\n\t}\r\n</style>",
    "<script lang=\"typescript\">import { spring } from 'svelte/motion';\r\nimport { draggable } from './draggable';\r\nimport { Module, Port, Connection } from './StructureLogic';\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nimport FlowModuleHeaderv2 from './FlowModuleHeaderv2.svelte';\r\nimport FlowModuleContentv2 from './FlowModuleContentv2.svelte';\r\nexport let StrucModule;\r\nlet xPos;\r\nlet yPos;\r\nlet moduleName;\r\nlet moduleWidth;\r\nlet moduleHeight;\r\n$: xPos = StrucModule.xPos;\r\n$: yPos = StrucModule.yPos;\r\n$: moduleName = StrucModule.name;\r\n$: moduleWidth = StrucModule.getModuleWidth();\r\n$: moduleHeight = StrucModule.getModuleHeight();\r\n//if i want to access rect from component's parent (chart) -> add export\r\nlet rect;\r\n//draggable vars\r\nlet dx = 0;\r\nlet dy = 0;\r\n//in order to set x and y pos correctly on the module, we need to revert previous transformations changes (dx, dy)\r\nlet lastdx = 0;\r\nlet lastdy = 0;\r\nconst handleDragStart = (e) => {\r\n    rect.setAttribute('stroke', '#E7DFDD');\r\n    rect.setAttribute('stroke-width', '10px');\r\n};\r\nconst handleDragMove = (e) => {\r\n    let { lastX: lastX, lastY: lastY, dx: _dx, dy: _dy } = e.detail;\r\n    dx += _dx;\r\n    dy += _dy;\r\n    StrucModule.xPos = xPos + dx - lastdx;\r\n    StrucModule.yPos = yPos + dy - lastdy;\r\n    dx = 0;\r\n    dy = 0;\r\n    //console.log(\"FlowModulev2 -> xPos:\"+xPos+\" ; yPos:\"+yPos)\r\n    //console.log(\"FlowModulev2 -> dx:\"+dx+\" ; dy:\"+dy)\r\n    dispatch('handleDragMove', {\r\n        Module: { StrucModule },\r\n        lastX: { lastX },\r\n        lastY: { lastY },\r\n        dx: { dx },\r\n        dy: { dy }\r\n    });\r\n    lastdx = dx;\r\n    lastdy = dy;\r\n};\r\nconst handleDragEnd = (e) => {\r\n    let { lastX, lastY } = e.detail;\r\n    rect.setAttribute('stroke', 'green');\r\n    rect.setAttribute('stroke-width', '0px');\r\n    dispatch('handleDragEnd');\r\n    lastdx = 0;\r\n    lastdy = 0;\r\n};\r\nconst handleConnectionStart = (e) => {\r\n    //console.log(\"FlowModulev2 -> connection start handler\")\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionStart', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port },\r\n        parentModule: { StrucModule }\r\n    });\r\n};\r\nconst handleConnectionDrag = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionDrag', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port },\r\n        parentModule: { StrucModule }\r\n    });\r\n};\r\nconst handleConnectionEnd = (e) => {\r\n    let { xInitial, xFinal, yInitial, yFinal, port } = e.detail;\r\n    dispatch('handleConnectionEnd', {\r\n        xInitial: { xInitial },\r\n        xFinal: { xFinal },\r\n        yInitial: { yInitial },\r\n        yFinal: { yFinal },\r\n        port: { port },\r\n        parentModule: { StrucModule }\r\n    });\r\n};\r\nconst handleDblClick = (e) => {\r\n    //console.log(\"FlowModulev2 -> Modulo clickado\")\r\n    dispatch('DblclickModule', {\r\n        moduleClicked: StrucModule\r\n    });\r\n};\r\n</script>\r\n\r\n<g class=\"node-container\" \r\n    transform={`translate(${dx} ${dy})`}\r\n    on:dblclick={handleDblClick}>    \r\n\t<rect \r\n        bind:this={rect} \r\n        class=\"node-background\" \r\n        x={xPos} \r\n        y={yPos} \r\n        width={moduleWidth} \r\n        height={moduleHeight} \r\n        rx=\"6\" \r\n        ry=\"6\" \r\n        />\t\r\n    <g  use:draggable  \r\n        on:dragmove={handleDragMove}\r\n        on:dragstart={handleDragStart}   \r\n        on:dragend={handleDragEnd}>\r\n\t    <FlowModuleHeaderv2\r\n            StrucModule={StrucModule}\r\n            />\r\n    </g>\t\r\n    <FlowModuleContentv2 \r\n        StrucModule={StrucModule}\r\n        on:handleConnectionStart={handleConnectionStart}\r\n        on:handleConnectionDrag={handleConnectionDrag}\r\n        on:handleConnectionEnd={handleConnectionEnd}\r\n        /> \r\n</g>\r\n<style>\r\n\t.node-container {\r\n\tcursor: move;\r\n\t}\r\n\t.node-background {\r\n\tfill: #1a1c1d;\r\n\t}\r\n</style>",
    "{#if show}\r\n<div>\r\n\r\n  <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n    <div class=\"modal-container\">\r\n      <main><h1>ComputeFlow</h1>\r\n            <h4>https://github.com/DanielMoreiraPT/ComputeFlow</h4>\r\n            <h2>Computeflow is a final project for Informatics Engineering Bachlor's degree.</h2>\r\n            <p>It's goal is to develop software able to provide an intuitive and interactive Interface for users that require usage of data flow programming without having extensive programming knowledge.</p>\r\n            <h2>Members</h2>    \r\n            <h3>Computation: </h3>\r\n                    <p>Aneta Pawelec (pawelec.aneta98@gmail.com)</p>\r\n                    <p>Daniel Moreira (danielbarbosa@ua.pt)</p>\r\n            <h3>Interface: </h3>\r\n                    <p>André Catarino (andre.catarino@ua.pt)</p>\r\n                    <p>Rui Melo (r.melo@ua.pt)</p>\r\n\r\n            <h2>Orientators</h2>   \r\n                <p>José Maria Fernandes (jfernan@ua.pt)</p>\r\n                <p>Sérgio Miguel Santos (sergio.santos@ua.pt)</p>\r\n                    \r\n            <h2>Supervisors</h2>   \r\n                <p>José Moreira (jose.moreira@ua.pt)</p>\r\n                <p>António Sousa Pereira (f185@ua.pt)</p>\r\n                <p>Rui Aguiar (ruilaa@ua.pt)</p>\r\n                \r\n    </main>\r\n    </div>\r\n  </div>\r\n</div>\r\n{/if}\r\n\r\n<script>\r\nimport { fade } from 'svelte/transition';\r\n\r\nfunction overlay_click(e) {\r\n    if ('close' in e.target.dataset)\r\n        show = false;\r\n}\r\n\r\nexport let show = false;\r\n</script>\r\n\r\n<style>\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  z-index: 10;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n.modal-container {\r\n  position: relative;\r\n  background-color:rgb(51, 51, 51);\r\n  width: 50vw;\r\n  margin: 1rem auto 0.2rem;\r\n  box-shadow: 0 3px 10px #555;\r\n}\r\nmain {\r\n  padding: 0.5rem;\r\n  color: white;\r\n}\r\n</style>",
    "\r\n<script>\r\n    import { fade } from 'svelte/transition';\r\n\r\n    import GoodEmoji from './../node_modules/svelte-icons/fa/FaSmile.svelte'\r\n    import TipEmoji from './../node_modules/svelte-icons/fa/FaSmileWink.svelte'\r\n    import BadEmoji from './../node_modules/svelte-icons/fa/FaSadTear.svelte'\r\n\r\n\r\n    function overlay_click(e) {\r\n        if ('close' in e.target.dataset)\r\n            show = false;\r\n    }\r\n    export let show = false;\r\n    export let message;\r\n    export let error;\r\n</script>\r\n\r\n\r\n{#if show}\r\n  {#if message==\"Project Name not defined\"}\r\n    <div>\r\n      <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n        <div class=\"modal-container\">\r\n          <main class=\"grid-container\">\r\n              <h4 class=\"welcoming\">Hello there!!!</h4>\r\n              <div class=\"emoji\"><TipEmoji/></div>\r\n            <h4 class=\"messageIntro\">I heard that you tried to save a file... There is no Project currently opened. Try \"Save as\" first.</h4>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  {:else if message==\"Port types are different\"}\r\n    <div>\r\n      <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n        <div class=\"modal-container\">\r\n          <main class=\"grid-container\">\r\n            <h4 class=\"welcoming\">Hello there!!!</h4>\r\n            <div class=\"emoji\"><TipEmoji/></div>\r\n            <h4 class=\"messageIntro\">I heard that you're trying to make a connection! There are several port types, but it is only possible to connect between similar port types!</h4>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  {:else if error==true}\r\n    <div>\r\n      <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n        <div class=\"modal-container\">\r\n          <main class=\"grid-container\">\r\n            <h4 class=\"welcoming\">Hello there...</h4>\r\n            <div class=\"emoji\"><BadEmoji/></div>\r\n            <h4 class=\"messageIntro\">Something went wrong unexpectedly...</h4>\r\n            <h4 class=\"message\">{message}</h4>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  {:else if error==false}\r\n    <div>\r\n      <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n        <div class=\"modal-container\">\r\n          <main>\r\n            <h1>ola</h1>\r\n            <h4>{message}</h4>\r\n            \r\n\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  {/if}\r\n{/if}\r\n\r\n\r\n<style>\r\n  .modal-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    z-index: 10;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  .modal-container {\r\n    position: relative;\r\n    background-color:rgb(51, 51, 51);\r\n    width: 30vw;\r\n    margin: 1rem auto 0.2rem;\r\n    box-shadow: 0 3px 10px #555;\r\n  }\r\n  main {\r\n    padding: 0.5rem;\r\n    color: white;\r\n    text-align: center;\r\n  }\r\n  .grid-container {\r\n    display: grid;\r\n    height:100%;\r\n    }\r\n\r\n  .welcoming {\r\n    grid-column: 1 / span 1;\r\n    grid-row: 1;\r\n  }\r\n  .emoji {\r\n    grid-column: 2 / span 1;\r\n    grid-row: 1;\r\n  }\r\n  .messageIntro {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 2;\r\n  }\r\n  .message {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 3;\r\n  }\r\n</style>",
    "{#if show}\r\n<div>\r\n\r\n  <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n    <div class=\"modal-container\">\r\n      <main><h1>Inner Workings of ComputeFlow</h1>\r\n                         \r\n            <h3>This is an aplication that aims to represent data flows and allgorithms in a flow programming paradigm.</h3>\r\n                   \r\n                <p>In the SideBar there is 2 types of modules: variables (modules with only outputs) and functions that may process multiple entries and output one or more results</p>\r\n\r\n                <p>Both this modules can be dragged into the chart, creating an execution graph that will be compiled in the JULIA runtime</p>\r\n                    \r\n                <p>It's also possible to find the \"Load Project\" section in the SideBar, where its located all graphs stored in JSON files under the same directory.</p>\r\n\r\n                <p>In the NavBar there is the possiblity to clean the chart by selecting \"New Project\", selecting \"Save Project\" will save the graph presented on the chart into a JSON file and the \"Save Project as\" will allow to define the name of the project.</p>\r\n                <p> There is also a Undo/Redo functionality allowing the user to access a previous chart state</p>\r\n                    \r\n            <h2>Note(for more advanced users)</h2>   \r\n                <p>All modules(both variables and functions) presented in the SideBar are defined in the \"ModuleTemplates\" JSON file, wich can be editted to add more modules into the interface, in a way that meets the user needs.</p>\r\n                \r\n                \r\n    </main>\r\n    </div>\r\n  </div>\r\n</div>\r\n{/if}\r\n\r\n<script lang=\"typescript\">import { fade } from 'svelte/transition';\r\nfunction overlay_click(e) {\r\n    if ('close' in e.target.dataset)\r\n        show = false;\r\n}\r\nexport let show = false;\r\n</script>\r\n\r\n<style>\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  z-index: 10;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n.modal-container {\r\n  position: relative;\r\n  background-color:rgb(51, 51, 51);\r\n  width: 50vw;\r\n  margin: 1rem auto 0.2rem;\r\n  box-shadow: 0 3px 10px #555;\r\n}\r\nmain {\r\n  padding: 0.5rem;\r\n  color: white;\r\n}\r\n</style>",
    "\r\n<script>\r\n    import { fade } from 'svelte/transition';\r\n\r\n    import GoodEmoji from './../node_modules/svelte-icons/fa/FaSmile.svelte'\r\n    import TipEmoji from './../node_modules/svelte-icons/fa/FaSmileWink.svelte'\r\n    import BadEmoji from './../node_modules/svelte-icons/fa/FaSadTear.svelte'\r\n\r\n\r\n    function overlay_click(e) {\r\n        if ('close' in e.target.dataset)\r\n            show = false;\r\n    }\r\n    export let show = false;\r\n</script>\r\n\r\n\r\n{#if show}\r\n    <div>\r\n      <div class=\"modal-overlay\" data-close on:click={overlay_click} transition:fade={{duration: 150}}>\r\n        <div class=\"modal-container\">\r\n          <main class=\"grid-container\">\r\n            <h4 class=\"welcoming\">Hello there!!!</h4>\r\n            <div class=\"emoji\"><TipEmoji/></div>\r\n            <h4 class=\"messageIntro\">I heard that you're trying to make a connection! There are several port types, but it is only possible to connect between similar port types!</h4>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n{/if}\r\n\r\n\r\n<style>\r\n  .modal-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    z-index: 10;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  .modal-container {\r\n    position: relative;\r\n    background-color:rgb(51, 51, 51);\r\n    width: 30vw;\r\n    margin: 1rem auto 0.2rem;\r\n    box-shadow: 0 3px 10px #555;\r\n  }\r\n  main {\r\n    padding: 0.5rem;\r\n    color: white;\r\n    text-align: center;\r\n  }\r\n  .grid-container {\r\n    display: grid;\r\n    height:100%;\r\n    }\r\n\r\n  .welcoming {\r\n    grid-column: 1 / span 1;\r\n    grid-row: 1;\r\n  }\r\n  .emoji {\r\n    grid-column: 2 / span 1;\r\n    grid-row: 1;\r\n  }\r\n  .messageIntro {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 2;\r\n  }\r\n  .message {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 3;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}